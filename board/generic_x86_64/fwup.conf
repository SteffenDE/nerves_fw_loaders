# Firmware configuration file for x86_64

require-fwup-version="0.15.0"  # For the trim() call

#
# Firmware metadata
#

# All of these can be overriden using environment variables of the same name.
#
#  Run 'fwup -m' to query values in a .fw file.
#  Use 'fw_printenv' to query values on the target.
#
# These are used by Nerves libraries to introspect.
define(NERVES_FW_PRODUCT, "Generic X86_64 firmware loader")
define(NERVES_FW_DESCRIPTION, "")
define(NERVES_FW_VERSION, "0.0.1")
define(NERVES_FW_PLATFORM, "x86_64")
define(NERVES_FW_ARCHITECTURE, "x86_64")
define(NERVES_FW_AUTHOR, "Steffen Deusch")

# This configuration file will create an image that has an MBR and the
# following 3 partitions:
#
# +----------------------------+
# | MBR w/ Grub boot code      |
# +----------------------------+
# | grub.img (<256K)           |
# +----------------------------+
# | Firmware configuration data|
# | (formatted as uboot env)   |
# +----------------------------+
# | Boot partition (FAT32)     |
# | /boot/grub/grub.cfg        |
# | /boot/grub/grubenv         |
# +----------------------------+
# | p2: Application (fat32)    |
# +----------------------------+

define(UBOOT_ENV_OFFSET, 2048)
define(UBOOT_ENV_COUNT, 16)  # 8 KB

# The boot partition contains the bootloader configuration
# 16 MB should be plenty for now.
define(BOOT_PART_OFFSET, 4096)
define(BOOT_PART_COUNT, 204800)

# Application data partition (5 GiB). This can be enlarged
# to fill the entire volume.
define-eval(APP_PART_OFFSET, "${BOOT_PART_OFFSET} + ${BOOT_PART_COUNT}")
define(APP_PART_COUNT, 10485760)

# Firmware archive metadata
meta-product = ${NERVES_FW_PRODUCT}
meta-description = ${NERVES_FW_DESCRIPTION}
meta-version = ${NERVES_FW_VERSION}
meta-platform = ${NERVES_FW_PLATFORM}
meta-architecture = ${NERVES_FW_ARCHITECTURE}
meta-author = ${NERVES_FW_AUTHOR}
meta-vcs-identifier = ${NERVES_FW_VCS_IDENTIFIER}
meta-misc = ${NERVES_FW_MISC}

# File resources are listed in the order that they are included in the .fw file
# This is important, since this is the order that they're written on a firmware
# update due to the event driven nature of the update system.
file-resource grub.img {
    host-path = "${BINARIES_DIR}/grub.img"
}
file-resource grub.cfg {
    host-path = "${BINARIES_DIR}/grub.cfg"
}

file-resource bzImage {
    host-path = "${BINARIES_DIR}/bzImage"
}

file-resource grubenv {
    host-path = "${BINARIES_DIR}/grubenv"
}

file-resource readme.txt {
    host-path = "${BINARIES_DIR}/readme.txt"
}

mbr mbr {
    bootstrap-code-host-path = "${BINARIES_DIR}/boot.img"
    signature = 0x04030201

    partition 0 {
        block-offset = ${BOOT_PART_OFFSET}
        block-count = ${BOOT_PART_COUNT}
        type = 0xef # ESP
        boot = true
    }
    partition 1 {
        block-offset = ${APP_PART_OFFSET}
        block-count = ${APP_PART_COUNT}
        type = 0xc # FAT32
        expand = true
    }
}

# Location where installed firmware information is stored.
# While this is called "u-boot", u-boot isn't involved in this
# setup. It just provides a convenient key/value store format.
uboot-environment uboot-env {
    block-offset = ${UBOOT_ENV_OFFSET}
    block-count = ${UBOOT_ENV_COUNT}
}

# This firmware task writes everything to the destination media.
# This should only be run for the first installation.
task complete {
    # Only match if not mounted
    require-unmounted-destination = true

    on-init {
        mbr_write(mbr)

        fat_mkfs(${BOOT_PART_OFFSET}, ${BOOT_PART_COUNT})
        fat_setlabel(${BOOT_PART_OFFSET}, "LOADER_BOOT")
        fat_mkdir(${BOOT_PART_OFFSET}, "/boot")
        fat_mkdir(${BOOT_PART_OFFSET}, "/boot/grub")

        fat_mkdir(${BOOT_PART_OFFSET}, "/EFI")
        fat_mkdir(${BOOT_PART_OFFSET}, "/EFI/BOOT")

        trim(${APP_PART_OFFSET}, ${APP_PART_COUNT})
        fat_mkfs(${APP_PART_OFFSET}, ${APP_PART_COUNT})
        fat_setlabel(${APP_PART_OFFSET}, "LOADER_DATA")
    }

    on-resource grub.img { raw_write(1) }
    on-resource grub.cfg { fat_write(${BOOT_PART_OFFSET}, "/boot/grub/grub.cfg") }
    on-resource grubenv { fat_write(${BOOT_PART_OFFSET}, "/boot/grub/grubenv") }

    on-resource bzImage { fat_write(${BOOT_PART_OFFSET}, "/EFI/BOOT/bootx64.efi") }
    on-resource readme.txt { fat_write(${APP_PART_OFFSET}, "/readme.txt") }
}
